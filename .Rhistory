function(data, characteristic = NULL,
selection = c("country_iso", "region_num", "Region", "Year")) {
return(
data %>%
select_(.dots = c(selection, characteristic, "nkill")) %>%
group_by_(.dots = c(selection, characteristic)) %>%
tally(wt = nkill) %>%
ungroup() %>%
rename(Victims = n)
)
}
joinNPerCountry <-
function(data, characteristic = NULL,
by = c("country_iso", "Year", "region_num", "Region")) {
return(full_join(getIncPerCountry(data, characteristic),
getVicPerCountry(data, characteristic),
by = c(by, characteristic)))
}
responses <- list("all" = joinNPerCountry(responseSelect),
"INT_ANY" = joinNPerCountry(responseSelect ,"INT_ANY"),
"success" = joinNPerCountry(responseSelect ,"success"),
"suicide" = joinNPerCountry(responseSelect ,"suicide"))
indicators <-
full_join(pop, urban, by=c("country_iso","Year")) %>%
full_join(gdp, by=c("country_iso","Year")) %>%
full_join(military, by=c("country_iso","Year")) %>%
full_join(inequality, by=c("country_iso","Year"))
# delete all rows with special data
# it does not fit to terrorism data set
indicators <- filter(indicators, country_iso != "WLD", country_iso != "IBT",
country_iso != "IDA", country_iso != "IDB",
country_iso != "IDX", country_iso != "OED",
country_iso != "LMC", country_iso != "LMY",
country_iso != "MIC", country_iso != "IBD",
country_iso != "EAR", country_iso != "UMC",
country_iso != "EAS", country_iso != "LTE",
country_iso != "EAP", country_iso != "EMU",
country_iso != "EUU", country_iso != "TEA",
country_iso != "TEC", country_iso != "ARB",
country_iso != "ECA", country_iso != "ECS",
country_iso != "HPC", country_iso != "PRE",
country_iso != "SAS", country_iso != "TSA")
indiData <- lapply(responses, full_join, x = indicators,
by = c("country_iso", "region_num", "Region", "Year"))
responses
indicators
head(indicators)
indiData <- lapply(responses, full_join, x = indicators,
by = c("country_iso", "Year"))
head(indiData)
head(indiData$all)
head(indiData$all, 20)
rm(indiData)
indiData <- lapply(responses, right_join, x = indicators,
by = c("country_iso", "Year"))
head(indiData$all, 20)
indiData <- lapply(indiData, mutate,
Country = countrycode(country_iso, "iso3c", "country.name"))
rm(swiid, pop, urban, gdp, military, inequality)
rm(indicators, responses)
rm(responseSelect, responses, indicators)
str(indiData)
responseSelect <- select(dat, country_txt, region_num = region,
Region = region_txt, Year = iyear, nkill,
INT_ANY, success, suicide)
responseSelect[,"country_iso"] <- countrycode(responseSelect$country_txt,
"country.name", "iso3c")
responseSelect <- na.omit(responseSelect)
joinNPerCountry(responseSelect ,"INT_ANY")
filter(joinNPerCountry(responseSelect ,"INT_ANY"), INT_ANY == 1)
responses <- list("all" = joinNPerCountry(responseSelect),
"INT_ANY" = filter(joinNPerCountry(
responseSelect ,"INT_ANY"), INT_ANY == 1),
"success" = filter(joinNPerCountry(
responseSelect ,"success"), success == 1),
"suicide" = filter(joinNPerCountry(
responseSelect ,"suicide"), suicide == 1))
indicators <-
full_join(pop, urban, by=c("country_iso","Year")) %>%
full_join(gdp, by=c("country_iso","Year")) %>%
full_join(military, by=c("country_iso","Year")) %>%
full_join(inequality, by=c("country_iso","Year"))
# delete all rows with special data
# it does not fit to terrorism data set
indicators <- filter(indicators, country_iso != "WLD", country_iso != "IBT",
country_iso != "IDA", country_iso != "IDB",
country_iso != "IDX", country_iso != "OED",
country_iso != "LMC", country_iso != "LMY",
country_iso != "MIC", country_iso != "IBD",
country_iso != "EAR", country_iso != "UMC",
country_iso != "EAS", country_iso != "LTE",
country_iso != "EAP", country_iso != "EMU",
country_iso != "EUU", country_iso != "TEA",
country_iso != "TEC", country_iso != "ARB",
country_iso != "ECA", country_iso != "ECS",
country_iso != "HPC", country_iso != "PRE",
country_iso != "SAS", country_iso != "TSA")
indiData <- lapply(responses, right_join, x = indicators,
by = c("country_iso", "Year"))
indiData <- lapply(indiData, mutate,
Country = countrycode(country_iso, "iso3c", "country.name"))
str(indiData)
responses
str(indiData)
indicators <-
full_join(pop, urban, by=c("country_iso","Year")) %>%
full_join(gdp, by=c("country_iso","Year")) %>%
full_join(military, by=c("country_iso","Year")) %>%
full_join(inequality, by=c("country_iso","Year"))
load(file=pasteq(pathToApp, "datasets/gtd.RData"))
pop <-
read.csv(file=pasteq(pathToApp,"datasets/population.csv"),
dec = ".", check.names = FALSE) %>%
melt(id=c("country_txt","country_iso")) %>%
select(country_iso, Year = variable, Population = value) %>%
mutate(country_iso = as.character(country_iso),
Year = as.integer(as.character(Year)), Population = as.numeric(Population))
urban <-
read.csv(file=pasteq(pathToApp,"datasets/urban.csv"),
dec = ",", check.names = FALSE) %>%
melt(id=c("country_txt","country_iso")) %>%
select(country_iso, Year = variable, Urban = value) %>%
mutate(country_iso = as.character(country_iso),
Year = as.integer(as.character(Year)))
gdp <-
read.csv(file=pasteq(pathToApp,"datasets/gdp.csv"),
dec = ".", check.names = FALSE) %>%
melt(id=c("country_txt","country_iso")) %>%
select(country_iso, Year = variable, GDP = value) %>%
mutate(country_iso = as.character(country_iso),
Year = as.integer(as.character(Year)))
military <-
read.csv(file=pasteq(pathToApp,"datasets/military.csv"),
dec = ",", check.names = FALSE) %>%
melt(id=c("country_txt","country_iso")) %>%
select(country_iso, Year = variable, Military = value) %>%
mutate(country_iso = as.character(country_iso),
Year = as.integer(as.character(Year)))
load(file=pasteq(pathToApp,"datasets/inequality.RData"))
inequality <- swiid %>%
bind_rows() %>%
group_by(country, year) %>%
summarize_each(funs(mean)) %>%
ungroup() %>%
filter(year >= 1970) %>%
select(country_txt = country, Year = year, Gini = gini_net)
inequality[,"country_iso"] <- countrycode(inequality$country_txt, "country.name", "iso3c")
inequality <- na.omit(select(inequality, country_iso, Year, Gini))
indicators <-
full_join(pop, urban, by=c("country_iso","Year")) %>%
full_join(gdp, by=c("country_iso","Year")) %>%
full_join(military, by=c("country_iso","Year")) %>%
full_join(inequality, by=c("country_iso","Year"))
# delete all rows with special data
# it does not fit to terrorism data set
indicators <- filter(indicators, country_iso != "WLD", country_iso != "IBT",
country_iso != "IDA", country_iso != "IDB",
country_iso != "IDX", country_iso != "OED",
country_iso != "LMC", country_iso != "LMY",
country_iso != "MIC", country_iso != "IBD",
country_iso != "EAR", country_iso != "UMC",
country_iso != "EAS", country_iso != "LTE",
country_iso != "EAP", country_iso != "EMU",
country_iso != "EUU", country_iso != "TEA",
country_iso != "TEC", country_iso != "ARB",
country_iso != "ECA", country_iso != "ECS",
country_iso != "HPC", country_iso != "PRE",
country_iso != "SAS", country_iso != "TSA")
indiData <- lapply(responses, right_join, x = indicators,
by = c("country_iso", "Year"))
indiData <- lapply(indiData, mutate,
Country = countrycode(country_iso, "iso3c", "country.name"))
str(iniData)
str(indiData)
source(pasteq(pathToApp, "ui.R"))
source(pasteq(pathToApp, "ui.R"))
min(indiData$all$Year)
source(pasteq(pathToApp, "ui.R"))
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "ui.R"))
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "ui.R"))
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
iniData[[all]]
indiData[[all]]
indiData$all
indiData[["all"]]
indiData[["all"]][["Victims"]]
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
max(indiData$all$Military)
max(omit.na(indiData$all$Military))
max(na.omit(indiData$all$Military))
indiData$all$Military
na.omit(indiData$all$Military)
na.omit(indiData$all$Military)
indiData$all$Military[indiData$all$country_iso == "USA"]
military[militarycountry_iso == "USA"]
military[military$country_iso == "USA"]
str(military)
military$Military[military$country_iso == "USA"]
military$Military[military$country_iso == "IRN"]
military <-
read.csv(file=pasteq(pathToApp,"datasets/military.csv"),
dec = ",", check.names = FALSE) %>%
melt(id=c("country_txt")) %>%
select(country_iso, Year = variable, Military = value) %>%
mutate(country_iso = as.character(country_iso),
Year = as.integer(as.character(Year)))
military[,"country_iso"] <- countrycode(military$country_txt, "country.name", "iso3c")
inequality <- na.omit(military)
military
military <-
read.csv(file=pasteq(pathToApp,"datasets/military.csv"),
dec = ",", check.names = FALSE) %>%
melt(id=c("country_txt")) %>%
select(country_iso, Year = variable, Military = value) %>%
mutate(country_iso = as.character(country_iso),
Year = as.integer(as.character(Year)))
military <-
read.csv(file=pasteq(pathToApp,"datasets/military.csv"),
dec = ",", check.names = FALSE) %>%
melt(id=c("country_txt")) %>%
select(Year = variable, Military = value) %>%
mutate(Year = as.integer(as.character(Year)))
military[,"country_iso"] <- countrycode(military$country_txt, "country.name", "iso3c")
inequality <- na.omit(military)
military
head(military)
military <-
read.csv(file=pasteq(pathToApp,"datasets/military.csv"),
dec = ",", check.names = FALSE) %>%
melt(id=c("country_txt")) %>%
select(country_txt, Year = variable, Military = value) %>%
mutate(Year = as.integer(as.character(Year)))
military[,"country_iso"] <- countrycode(military$country_txt, "country.name", "iso3c")
inequality <- na.omit(military)
military
head(military)
select(military, country_iso, Year, Military)
inequality <- na.omit(select(military, country_iso, Year, Military))
pathToApp <- "/home/carlo/Entwicklung/R/Hausarbeit/"
pasteq <- function(...) { paste(..., sep = "") }
source(pasteq(pathToApp, "dataHandling.R"))
source(pasteq(pathToApp, "ui.R"))
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "ui.R"))
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "ui.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
cor(indiData$all$Population, indiData$all$Military)
cor(indiData$all$Population, indiData$all$Military, na.rm = TRUE)
indiData$all$Military
indiData$all$Population
cor(indiData$all$Population, indiData$all$Military, na.rm = TRUE)
cor(indiData$all$Population, indiData$all$Military)
cor(indiData$all$Population, indiData$all$Military, use="complete")
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "ui.R"))
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "ui.R"))
source(pasteq(pathToApp, "server.R"))
shinyApp(ui=ui, server=server)
source(pasteq(pathToApp, "ui.R"))
shinyApp(ui=ui, server=server)
getDataLabels <- function() {
# build named vector with avaialable refions and order by name
availableRegions <-
setNames(1:12, c("North America", "Central America & Caribbean",
"South America", "East Asia", "Southeast Asia",
"South Asia", "Central Asia", "Western Europe",
"Eastern Europe", "Middle East & North Africa",
"Sub‐Saharan Africa", "Australasia & Oceania"))
availableRegions <- availableRegions[order(names(availableRegions))]
# build named vector with available decades
availableDecades <- c("1970s" = 1970, "1980s" = 1980, "1990s" = 1990,
"2000s" = 2000, "2010s" = 2010)
# build named vector with used indicators
availableIndicators <- c("Population" = "Population",
"Urban Percantage" = "Urban",
"GDP" = "GDP",
"Military Expenditure" = "Military",
"Inequality" = "Gini")
# build named vector with used characteristics and their labels
availableCharacteristics <-
list(
"attacktype1" =
list("name" = "Type of attack",
"labels" =
setNames(1:9, c("Assassination", "Hijacking", "Kidnapping",
"Barricade Incident", "Bombing/Explosion",
"Armed Assault", "Unarmed Assault",
"Facility/Infrastructure Attack", "Unknown"))),
"success" =
list("name" = "Success of attack",
"labels" = setNames(0:1, c("No", "Yes"))),
"suicide" =
list("name" = "Attack with suicide",
"labels" = setNames(0:1, c("No", "Yes"))),
"weaptype1" =
list("name" = "Type of weapon",
"labels" =
setNames(1:13, c("Biological", "Chemical", "Radiological",
"Nuclear", "Firearms", "Explosives",
"Fake Weapons", "Incendiary", "Melee", "Vehicle",
"Sabotage Equipment", "Other", "Unknown"))),
"targtype1" =
list("name" = "Type of victim",
"labels" =
setNames(1:22, c("Business", "Governmental (General)", "Police",
"Military", "Abortion Related",
"Airports & Aircrafts", "Government (Diplomatic)",
"Educational Institution", "Food & Water Supply",
"Journalists & Media", "Maritime", "NGO",
"Other", "Citizens & Propoerty",
"Religoius Figures & Insitutions",
"Telecommunication", "Terrorists & Militia",
"Tourists", "Other Transportation", "Unknown",
"Utilities", "Violent Political Parties"))),
"nperps" =
list("name" = "Number of attackers",
"labels" =
setNames(c(0:5,99),
c("0", "1", "2", "3", "4", "5 or more", "Unknown"))),
"claimed" =
list("name" = "Claimed attack",
"labels" = setNames(c(0:1,99), c("No", "Yes", "Unknown"))),
"INT_ANY" =
list("name" = "International attack",
"labels" = setNames(c(0:1,99), c("No", "Yes", "Unknown"))))
# return all available labels as list
return(
list(
"regions" = availableRegions,
"decades" = availableDecades,
"indicators" = availableIndicators,
"characteristics" = availableCharacteristics
)
)
}
dataLabels <- getDataLabels()
str(dataLabels)
dataLabels$characteristics
names(dataLabels$characteristics)
selection <- names(dataLabels$characteristics)
dataLabels <- getDataLabels()
getDataLabels <- function() {
# build named vector with avaialable refions and order by name
availableRegions <-
setNames(1:12, c("North America", "Central America & Caribbean",
"South America", "East Asia", "Southeast Asia",
"South Asia", "Central Asia", "Western Europe",
"Eastern Europe", "Middle East & North Africa",
"Sub‐Saharan Africa", "Australasia & Oceania"))
availableRegions <- availableRegions[order(names(availableRegions))]
# build named vector with available decades
availableDecades <- c("1970s" = 1970, "1980s" = 1980, "1990s" = 1990,
"2000s" = 2000, "2010s" = 2010)
# build named vector with used indicators
availableIndicators <- c("Population" = "Population",
"Urban Percantage" = "Urban",
"GDP" = "GDP",
"Military Expenditure" = "Military",
"Inequality" = "Gini")
# build named vector with used characteristics and their labels
availableCharacteristics <-
list(
"attacktype1" =
list("name" = "Type of attack",
"labels" =
setNames(1:9, c("Assassination", "Hijacking", "Kidnapping",
"Barricade Incident", "Bombing/Explosion",
"Armed Assault", "Unarmed Assault",
"Facility/Infrastructure Attack", "Unknown"))),
"success" =
list("name" = "Success of attack",
"labels" = setNames(0:1, c("No", "Yes"))),
"suicide" =
list("name" = "Attack with suicide",
"labels" = setNames(0:1, c("No", "Yes"))),
"weaptype1" =
list("name" = "Type of weapon",
"labels" =
setNames(1:13, c("Biological", "Chemical", "Radiological",
"Nuclear", "Firearms", "Explosives",
"Fake Weapons", "Incendiary", "Melee", "Vehicle",
"Sabotage Equipment", "Other", "Unknown"))),
"targtype1" =
list("name" = "Type of victim",
"labels" =
setNames(1:22, c("Business", "Governmental (General)", "Police",
"Military", "Abortion Related",
"Airports & Aircrafts", "Government (Diplomatic)",
"Educational Institution", "Food & Water Supply",
"Journalists & Media", "Maritime", "NGO",
"Other", "Citizens & Propoerty",
"Religoius Figures & Insitutions",
"Telecommunication", "Terrorists & Militia",
"Tourists", "Other Transportation", "Unknown",
"Utilities", "Violent Political Parties"))),
"nperps" =
list("name" = "Number of attackers",
"labels" =
setNames(c(0:5,99),
c("0", "1", "2", "3", "4", "5 or more", "Unknown"))),
"claimed" =
list("name" = "Claimed attack",
"labels" = setNames(c(0:1,99), c("No", "Yes", "Unknown"))),
"INT_ANY" =
list("name" = "International attack",
"labels" = setNames(c(0:1,99), c("No", "Yes", "Unknown"))))
# return all available labels as list
return(
list(
"regions" = availableRegions,
"decades" = availableDecades,
"indicators" = availableIndicators,
"characteristics" = availableCharacteristics
)
)
}
dataLabels <- getDataLabels()
selection <- names(dataLabels$characteristics)
selection
"nperps" %in% selection
devtools::install_github("rstudio/rmarkdown")
rmarkdown::render('in.md',
output_format=pdf_document(latex_engine='xelatex')
)
library(shiny)
library(shiny)
load(file = pasteq(rawDir, "/gtd.RData"))
library(openxlsx)
library(shiny)
library(ggplot2)
library(countrycode)
library(plotly)
library(RColorBrewer)
library(reshape)
library(dplyr)
pasteq <- function(...) {
# helper function to paste strings with no sep
#
# Args:
#   ...: multiple strings
#
# Returns:
#   the pasted string with no separation
paste(..., sep = "")
}
load(file = pasteq(rawDir, "/gtd.RData"))
rawDir = "raw"
load(file = pasteq(rawDir, "/gtd.RData"))
setwd("/home/carlo/Entwicklung/R/gtd-shiny/")
load(file = pasteq(rawDir, "/gtd.RData"))
str(dat)
dim(dat)
unique(dat$region)
unique(dat$attacktype1)
unique(names(dat$attacktype1))
dat$attacktype1
dat$attacktype1
str(dat$attacktype1)
str$dat
str(dat)
str(dat$attacktype1_txt)
unique(dat$attacktype1_txt)
load(file = pasteq(rawDir, "/inequality.RData"))
str(swiid)
military <-
read.csv(file = pasteq(rawDir, "/military.csv"),
dec = ",", check.names = FALSE)
military <-
read.csv(file = pasteq(rawDir, "/military.csv"),
dec = ",", check.names = FALSE) %>%
melt(id=c("country_txt"))
setwd("/home/carlo/Entwicklung/R/gtd-shiny/")
source("preprocessing.R")
loadData()
source("ui.R")
source("server.R")
shinyApp(ui=ui, server=server)
shinyApp(ui=ui, server=server)
